# comment line
#
# for modules, the config file is module.conf
# one {} for one module
# fields:
#	name:
#	path: ("so_name" or "/xxx")
#	comment: ("what this module do?")
#	category: ("collect"/"analysis"/"hacking"/"core")
#	type: ((BIN/SRC/BOTH)_(KERN/USER/BOTH)_(LINUX/WIN/OSX/IOS/ANDROID)_(more))
#
# for other config
# like module config, in a seperate conf file
#
# for each file, it parse the conf file and generate a list of key/values...
# for collect module, you could also use ${SOPATH} ${RESFILE} ${TPROJECT}, check them in collect.c
#
# {
#	name: collect
#	path: collect.so
#	comment: "collect target information"
#	category: core
#	type: BOTH_BOTH_ANY_ANY
#}
#{
#	name: analysis
#	path: analysis.so
#	comment: "analysis the collected information"
#	category: core
#	type: BOTH_BOTH_ANY_ANY
#}
#{
#	name: hacking
#	path: hacking.so
#	comment: "do anything you want to do"
#	category: core
#	type: BOTH_BOTH_ANY_ANY
#}
#{
#	name: gcc_c
#	path: gcc_c.so
#	comment: "make -C ${TPROJECT} EXTRA_CFLAGS+='-fplugin=${SOPATH} -fplugin-arg-gcc_c-output=${RESFILE}' -jx ..."
#	category: collect
#	type: SRC_BOTH_LINUX_GCC_C
#}
#{
#	name: gcc_c
#	path: gcc_c.so
#	comment: "analysis information collected by collect/gcc_c.so"
#	category: analysis
#	type: SRC_BOTH_LINUX_GCC_C
#}
#{
#	name: uninit
#	path: uninit.so
#	comment: "check for uninitialized variable use"
#	category: hacking
#	type: SRC_BOTH_LINUX_GCC_C
#}
